version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: stats_learning_db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: appdb
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./stats-learning-backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d appdb"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - stats_learning_network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: stats_learning_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - stats_learning_network

  # Backend API
  backend:
    build:
      context: ./stats-learning-backend
      dockerfile: Dockerfile
    container_name: stats_learning_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://app:app@db:5432/appdb
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
      - SECRET_KEY=your-secret-key-change-in-production
      - CORS_ORIGINS=http://localhost:5173,http://localhost:3000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./stats-learning-backend:/app
      - /app/__pycache__
    networks:
      - stats_learning_network
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        python -c 'import time; time.sleep(10)' &&
        echo 'Running migrations...' &&
        python scripts/migrate_duolingo_features.py &&
        echo 'Starting backend server...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Frontend (Development)
  frontend:
    build:
      context: ./Stat Learning-frontend
      dockerfile: Dockerfile.dev
    container_name: stats_learning_frontend
    restart: unless-stopped
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
    volumes:
      - ./Stat Learning-frontend:/app
      - /app/node_modules
    networks:
      - stats_learning_network
    command: npm run dev

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  stats_learning_network:
    driver: bridge
